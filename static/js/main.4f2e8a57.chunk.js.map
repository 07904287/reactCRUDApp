{"version":3,"sources":["table/DepartmentTable.js","forms/AddDepartmentForm.js","forms/EditDepartmentForm.js","forms/AddEmployeeForm.js","forms/EditEmployeeForm.js","table/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["DepartmentTable","props","departments","length","map","department","key","department_id","name","created_at","updated_at","onClick","editRow","className","deleteDepartment","colSpan","AddDepartmentForm","initialFormState","useState","setDepartment","onSubmit","event","preventDefault","addDepartment","type","value","onChange","target","EditDepartmentForm","currentDepartment","useEffect","updateDepartment","setEditing","AddEmployeeForm","age","contract_employee","address","employee","setEmployee","handleInputChange","console","log","addEmployee","department_name","checked","e","placeholder","cacheOptions","defaultOptions","loadOptions","inputValue","url","fetch","then","response","json","catch","err","getOptionValue","getOptionLabel","EditEmployeeForm","currentEmployee","updateEmployee","employee_id","EmployeeTable","employees","deleteEmployee","App","to","exact","path","setDepartments","editing","setCurrentDepartment","a","fetchDepartments","id","updatedDepartment","data","method","headers","body","JSON","stringify","error","filter","setEmployees","setCurrentEmployee","fetchEmployees","updatedEmployee","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4f2e8a57.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DepartmentTable = (props) => (\r\n<table>\r\n    <thead>\r\n      <tr>\r\n        <th>Department ID</th>  \r\n        <th>Department name</th>\r\n        <th>Created at</th>\r\n        <th>Updated at</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n    \r\n    {props.departments.length > 0 ? (\r\n        props.departments.map(department => (\r\n          <tr key={department.department_id}>\r\n            <td>{department.department_id}</td>\r\n            <td>{department.name}</td>\r\n            <td>{department.created_at}</td>\r\n            <td>{department.updated_at}</td>\r\n            <td>\r\n            <button\r\n                onClick={() => {\r\n                  props.editRow(department)\r\n                }}\r\n                className=\"button muted-button\"\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => props.deleteDepartment(department.department_id)}\r\n                className=\"button muted-button\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={3}>No departments</td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default DepartmentTable","import React, { useState } from 'react'\r\n\r\nconst AddDepartmentForm = props => {\r\n  const initialFormState = { name: ''}\r\n  const [department, setDepartment] = useState(initialFormState)\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setDepartment({ ...department, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n        if (!department.name) return\r\n        props.addDepartment(department)\r\n        setDepartment(initialFormState)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={department.name} onChange={handleInputChange} />\r\n      <button>Add new department</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddDepartmentForm","import React, { useState, useEffect } from 'react'\r\n\r\nconst EditDepartmentForm = props => {\r\n  const [department, setDepartment] = useState(props.currentDepartment)\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setDepartment({ ...department, [name]: value })\r\n  }\r\n\r\n  useEffect(() => {\r\n    setDepartment(props.currentDepartment)\r\n  }, [props])\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n        props.updateDepartment(department.department_id, department)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={department.name} onChange={handleInputChange} />\r\n      <button>Update department</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditDepartmentForm","import React, { useState } from 'react'\r\nimport AsyncSelect from 'react-select/async';\r\nimport '../App.css'\r\n\r\nconst AddEmployeeForm = props => {\r\n  const initialFormState = { name: '', age:'', contract_employee: false, address: ''}\r\n  const [employee, setEmployee] = useState(initialFormState)\r\n\r\n  const handleInputChange = event => {\r\n      \r\n    const { name, value } = event.target\r\n\r\n    setEmployee({ ...employee, [name]: value })\r\n  }\r\n\r\n\r\n \r\nconst getOptionValue = (department) => department.name;\r\n\r\nconst getOptionLabel = (department) => department.name;\r\n\r\nconst promiseOptions = inputValue => {\r\n    const url = `http://206.189.72.24:8000/api/department/list${inputValue ? '?searchParam=' + inputValue : ''}`;\r\n    return fetch(url)\r\n             .then(response => response.json()) // my option list array?\r\n             .catch(err => {\r\n               console.log('some error', err);\r\n             });\r\n  };\r\n  \r\n\r\n  function handleAsyncSelect(e) {\r\n      \r\nsetEmployee({ ...employee, department: e.department_id, department_name: e.name })\r\n   \r\n  }\r\n\r\n  function handleCheckbox(e){\r\n        setEmployee({...employee, contract_employee: e.target.checked})\r\n  }\r\n  \r\n  function clearForm(){\r\n      setEmployee({name: '', age:'', contract_employee: false, address: '', department:'', department_name:''})\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n        if (!employee.name || !employee.age || !employee.address) return\r\n        console.log(\"submit\" + employee.department)\r\n        props.addEmployee(employee)\r\n        clearForm()\r\n        console.log(employee)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={employee.name} onChange={handleInputChange} />\r\n      <label>Age</label>\r\n      <input type=\"number\" name=\"age\" value={employee.age} onChange={handleInputChange} />\r\n      <label>Address</label>\r\n      <input type=\"text\" name=\"address\" value={employee.address} onChange={handleInputChange} />\r\n      <label>Contract Type</label>\r\n      <input type=\"checkbox\" name=\"contract\" checked={employee.contract_employee} onChange={handleCheckbox} /> Check if employee is a contractor \r\n      <label>Department</label>\r\n      \r\n     \r\n      <AsyncSelect className=\"asyncSelect\" value={employee.department_name}  placeholder={employee.department_name} cacheOptions defaultOptions name=\"department\" onChange={handleAsyncSelect} loadOptions={promiseOptions} getOptionValue={getOptionValue}\r\n        getOptionLabel={getOptionLabel}/>\r\n\t\t\r\n\r\n      <button>Add new employee</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddEmployeeForm","import React, { useState, useEffect } from 'react'\r\nimport AsyncSelect from 'react-select/async';\r\nimport '../App.css'\r\n\r\nconst EditEmployeeForm = props => {\r\n    \r\nconst [employee, setEmployee] = useState(props.currentEmployee)\r\n\r\nconst handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setEmployee({ ...employee, [name]: value })\r\n}\r\n\r\nuseEffect(() => {\r\n    setEmployee(props.currentEmployee)\r\n}, [props])\r\n\r\n\r\nconst getOptionValue = (department) => department.name;\r\n\r\nconst getOptionLabel = (department) => department.name;\r\n  \r\nconst promiseOptions = inputValue => {\r\n    const url = `http://206.189.72.24:8000/api/department/list${inputValue ? '?searchParam=' + inputValue : ''}`;\r\n    return fetch(url)\r\n        .then(response => response.json()) // my option list array?\r\n        .catch(err => {\r\n            console.log('some error', err);\r\n        });\r\n};\r\n\r\nfunction handleAsyncSelect(e) {\r\n    console.log(\"handleAsyncSelect\" + e.department_id)\r\n    setEmployee({ ...employee, department: e.department_id })\r\n}\r\n\r\nfunction handleCheckbox(e){\r\n    setEmployee({...employee, contract_employee: e.target.checked})\r\n}\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n        props.updateEmployee(employee.employee_id, employee)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={employee.name} onChange={handleInputChange} />\r\n      <label>Age</label>\r\n      <input type=\"number\" name=\"age\" value={employee.age} onChange={handleInputChange} />\r\n      <label>Address</label>\r\n      <input type=\"text\" name=\"address\" value={employee.address} onChange={handleInputChange} />\r\n      <label>Contract Type</label>\r\n      <input type=\"checkbox\" name=\"contract\" checked={employee.contract_employee} onChange={handleCheckbox} /> Check if employee is a contractor \r\n      <label>Department</label>\r\n      <AsyncSelect className=\"asyncSelect\" placeholder={employee.department} cacheOptions defaultOptions name=\"department\" onChange={handleAsyncSelect} loadOptions={promiseOptions} getOptionValue={getOptionValue}\r\n        getOptionLabel={getOptionLabel}/>\r\n      <button>Update employee</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditEmployeeForm","import React from 'react'\r\n\r\nconst EmployeeTable = (props) => (\r\n<table>\r\n    <thead>\r\n      <tr>\r\n        <th>Employee name</th>\r\n        <th>Age</th>\r\n        <th>Contract</th>\r\n        <th>Address</th>\r\n        <th>Department</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n    \r\n    {props.employees.length > 0 ? (\r\n        props.employees.map(employee => (\r\n          <tr key={employee.employee_id}>\r\n            <td>{employee.name}</td>\r\n            <td>{employee.age}</td>\r\n            <td>{`${employee.contract_employee}`}</td>\r\n            <td>{employee.address}</td>\r\n            <td>{employee.department}</td>\r\n            <td>\r\n            <button\r\n                onClick={() => {\r\n                  props.editRow(employee)\r\n                }}\r\n                className=\"button muted-button\"\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => props.deleteEmployee(employee.employee_id)}\r\n                className=\"button muted-button\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={3}>No employees</td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default EmployeeTable","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport DepartmentTable from './table/DepartmentTable'\nimport AddDepartmentForm from './forms/AddDepartmentForm'\nimport EditDepartmentForm from './forms/EditDepartmentForm'\nimport AddEmployeeForm from './forms/AddEmployeeForm'\nimport EditEmployeeForm from './forms/EditEmployeeForm'\nimport EmployeeTable from './table/EmployeeTable';\nimport './App.css'\n\nfunction App() {\n\n  \nfunction Departments(){\n    const [departments, setDepartments] = useState([]);\n  const [editing, setEditing] = useState(false)\n\n  const initialFormState = { department_id: '', name: '' }\n  const [currentDepartment, setCurrentDepartment] = useState(initialFormState)\n\n  async function fetchDepartments() {\n    const response = await fetch('http://206.189.72.24:8000/api/department/list');\n    const json = await response.json();\n    setDepartments(json);\n}\n\nconst addDepartment = (department) => {\n\n  const data = { name: department.name };\n  const response = fetch('http://206.189.72.24:8000/api/department/add', {\n    method: 'POST', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n  .then((response) => response.json())\n  .then((data) => {\n    console.log('Success:', data);\n    setDepartments([ ...departments, data ])\n  })\n  .catch((error) => {\n    console.error('Error:', error);\n  });\n  \n}\n\n\nconst editRow = department => {\n  setEditing(true)\n\n  setCurrentDepartment({ ...department, name: department.name })\n}\n\nconst updateDepartment = (id, updatedDepartment) => {\n  setEditing(false)\n  \n  const data = { name: updatedDepartment.name };\n  const response = fetch('http://206.189.72.24:8000/api/department/interact/' + id, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n  \n  .catch((error) => {\n    console.error('Error:', error);\n  });\n\n  setDepartments(departments.map(department => (department.department_id === id ? updatedDepartment : department)))\n  \n}\n\nconst deleteDepartment = id => {\n  setDepartments(departments.filter(department => department.department_id !== id))\n\n  const data = { department_id: id };\n  const response = fetch('http://206.189.72.24:8000/api/department/interact/' + id, {\n    method: 'DELETE', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n  \n  .catch((error) => {\n    console.error('Error:', error);\n  });\n  \n}\n\n\n  useEffect(() => {\n    fetchDepartments();\n}, []);\n\n  return (\n\n\n    <div className=\"container\">\n     \n      <div className=\"flex-row\">\n          <div className=\"flex-large\">\n            {editing ? (\n            <div>\n          \n           <h2>Edit department</h2>\n            <EditDepartmentForm\n            editing={editing}\n            setEditing={setEditing}\n            currentDepartment={currentDepartment}\n            updateDepartment={updateDepartment}\n           />\n           </div>\n         ) : (\n          <div>\n              <h2>Add department</h2>\n              <AddDepartmentForm addDepartment={addDepartment} />\n            </div>\n            \n            )}\n            </div>\n            <div className=\"flex-large\">\n              <h2>View departments</h2>\n              <DepartmentTable departments={departments} editRow={editRow} deleteDepartment={deleteDepartment}/>\n            </div>\n          </div>\n    </div>\n\n    \n  );\n}\n\nfunction Employees(){\n \n  const [employees, setEmployees] = useState([]);\n  const [editing, setEditing] = useState(false)\n\n  const initialFormState = { employee_id: '', name: '' }\n  const [currentEmployee, setCurrentEmployee] = useState(initialFormState)\n\n  async function fetchEmployees() {\n    const response = await fetch('http://206.189.72.24:8000/api/employee/list');\n    const json = await response.json();\n    setEmployees(json);\n}\n\n\n\nconst addEmployee = (employee) => {\n\n  const data = { name: employee.name, age: employee.age, contract_employee: employee.contract_employee, address: employee.address, department: employee.department };\n  const response = fetch('http://206.189.72.24:8000/api/employee/add', {\n    method: 'POST', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n  .then((response) => response.json())\n  .then((data) => {\n    console.log('Success:', data);\n    setEmployees([ ...employees, data ])\n  })\n  .catch((error) => {\n    console.error('Error:', error);\n  });\n  \n}\n\n\nconst editRow = employee => {\n  setEditing(true)\n\n  setCurrentEmployee({ ...employee, name: employee.name, department:employee.department })\n}\n\nconst updateEmployee = (id, updatedEmployee) => {\n  setEditing(false)\n  console.log(updatedEmployee)\n  const data = { name: updatedEmployee.name, age:updatedEmployee.age, contract_employee: updatedEmployee.contract_employee, address:updatedEmployee.address, department: updatedEmployee.department };\n  const response = fetch('http://206.189.72.24:8000/api/employee/interact/' + id, {\n    method: 'POST', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n  \n  .catch((error) => {\n    console.error('Error:', error);\n  });\n/*console.log(\"updateEmployee\")\nconsole.log(\"employees\" + employees.department)\nconsole.log(\"updatedEmployee\" + updatedEmployee.department_id)\nconsole.log(\"employees\" + employees.name)\nconsole.log(\"updatedEmployee\" + updatedEmployee.name)\n*/\n//employees.map(employee => console.log(employee))\n\n  setEmployees(employees.map(employee => (employee.employee_id === id ? updatedEmployee : employee)))\n  \n}\n\nconst deleteEmployee = id => {\n  \n  \n  const data = { employee_id: id };\n  const response = fetch('http://206.189.72.24:8000/api/employee/interact/' + id, {\n    method: 'DELETE', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n  \n  .catch((error) => {\n    console.error('Error:', error);\n  });\n  setEmployees(employees.filter(employee => employee.employee_id !== id))\n  \n}\n\n\n  useEffect(() => {\n    console.log(\"reload\")\n    fetchEmployees();\n}, []);\n\n  return (\n\n\n    <div className=\"container\">\n     \n      <div className=\"flex-row\">\n          <div className=\"flex-large\">\n            {editing ? (\n            <div>\n          \n           <h2>Edit employee</h2>\n            <EditEmployeeForm\n            editing={editing}\n            setEditing={setEditing}\n            currentEmployee={currentEmployee}\n            updateEmployee={updateEmployee}\n           />\n           </div>\n         ) : (\n          <div>\n              <h2>Add employee</h2>\n              <AddEmployeeForm addEmployee={addEmployee} />\n            </div>\n            \n            )}\n            </div>\n            <div className=\"flex-large\">\n              <h2>View employees</h2>\n              <EmployeeTable employees={employees} editRow={editRow} deleteEmployee={deleteEmployee}/>\n            </div>\n          </div>\n    </div>\n\n    \n  );\n}\n\nreturn (\n\n\n  <div className=\"container\">\n    <Router>\n\n  <div className=\"topnav\">\n    <Link className=\"navMenuItem\" to=\"/\">Departments</Link>\n    <Link className=\"navMenuItem\" to=\"/employees\">Employees</Link>\n  </div>\n    \n\n <Switch>\n          <Route exact path=\"/\">\n            <Departments />\n          </Route>\n          <Route path=\"/employees\">\n            <Employees />\n          </Route>\n          </Switch>\n          </Router>\n    </div>\n    )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}